#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:djula :cl-ppcre :uiop) :silent t)
  )

(defpackage :ros.script.lambda-over-lambda.3758533090
  (:use :cl))
(in-package :ros.script.lambda-over-lambda.3758533090)

;; cd `dirname $0`
(defparameter *command-dir* (make-pathname :defaults *load-pathname* :name nil :type nil))
(uiop:chdir *command-dir*)

(djula:add-template-directory (uiop:merge-pathnames* "templates/" *command-dir*))
(defconstant +template+ (djula:compile-template* "template.ros"))
(defvar *ros-file*)

(defun file-get-contents (filename)
  (with-open-file (stream filename)
    (let ((contents (make-string (file-length stream))))
      (read-sequence contents stream)
      contents)))

(defun get-ros-package (content) ; todo: err handling
  (elt (second (multiple-value-list (cl-ppcre:scan-to-strings "\(defpackage :([^
 ]+)\)" content))) 1))

(defun delete-shebang (content)
  (cl-ppcre:regex-replace "\\A#![^
]+
" content ""))

(defun swap-main (content)
  (cl-ppcre:regex-replace "\\(defun main" content "(defun original-main"))

(defun main (&rest argv)
  (declare (ignorable argv))
  (uiop:chdir *command-dir*)
  (setf *ros-file* (elt argv 0))
  ;; rosファイルを変換して中間rosファイルを生成する
  ;; 渡されるrosファイルは，第一引数にhandler，第二引数にcontentが入って渡されるという想定
  (let* ((contents (file-get-contents *ros-file*))
         (ros-package (get-ros-package contents)))
    (with-open-file (s (uiop:merge-pathnames* #P"temporary.ros" *command-dir*) :direction :output)
      (djula:render-template* +template+ s :body (swap-main (delete-shebang contents)) :ros-package (string-upcase ros-package)))
    (uiop:run-program "make -B build" :output *standard-output* :error-output *error-output*)
    (uiop:rename-file-overwriting-target (uiop:merge-pathnames* "out.zip" *command-dir*) (uiop:merge-pathnames* "out.zip" *default-pathname-defaults*)))
  )
;;; vim: set ft=lisp lisp:
