#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  (setf *features* (delete :ipv6 *features*)) ;; ccl
  #+quicklisp (ql:quickload '(:dexador :uiop :cl-ppcre) :silent nil)
  )

(defpackage :ros.script.bootstrap.3758360166
  (:use :cl))
(in-package :ros.script.bootstrap.3758360166)

(defvar *handler*)
(defvar *lambda-task-root*)
(defvar *aws-lambda-runtime-api*)

(defun load-envvar ()
  "Loads environment variables to work lambda script correctly."
  (setf *handler*
        (uiop:getenv "_HANDLER"))
  (setf *lambda-task-root*
        (uiop:getenv "LAMBDA_TASK_ROOT"))
  (setf *aws-lambda-runtime-api*
        (uiop:getenv "AWS_LAMBDA_RUNTIME_API")))

(defun handler->function (handler-string)
  "Returns function object designated by HANDLER-STRING, formatted in \"PACKAGE:SYMBOL\" form.
 Package name cannot be omitted."
  (let* ((split (multiple-value-list (cl-ppcre:scan-to-strings "([^:]+)::?(.+)" handler-string)))
         (pkg-name (string-upcase (elt (cadr split) 0)))
         (func-name (string-upcase (elt (cadr split) 1)))
         (pkg (find-package pkg-name)))
    (if pkg
        (find-symbol func-name (find-package pkg))
        nil)))

(defun default-handler (content)
  "Only returns message."
  (declare (ignorable content))
  "Handler not found.")

(defun get-handler (handler)
  "Returns function object from string using HANDLER->FUNCTION.
 When symbol not found or error occurred, DEFAULT-HANDLER is returned."
  (handler-case
      (or (handler->function handler)
          #'default-handler)
    (error () #'default-handler)))

(defun main-loop (handler)
  "Main loop processes lambda requests. Specify function designator with HANDLER."
  (declare (ignorable handler))
  (let ((next-endpoint
          (format nil "http://~A/2018-06-01/runtime/invocation/next" *aws-lambda-runtime-api*)))
    (loop for (body status headers . nil) = (multiple-value-list (dex:get next-endpoint))
          as request-id = (gethash "lambda-runtime-aws-request-id" headers)
          as response = (funcall (get-handler handler) body)
          as response-endpoint = (format nil "http://~A/2018-06-01/runtime/invocation/~A/response" *aws-lambda-runtime-api* request-id)
          do (dex:post response-endpoint :content response))))

;; entrypoint
(defun main ()
  (load-envvar)
  (uiop:chdir *lambda-task-root*)
  (main-loop *handler*))
;;; vim: set ft=lisp lisp:
